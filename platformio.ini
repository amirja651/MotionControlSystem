; PlatformIO Project Configuration File for ESP32 Motion Control System Tests
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32dev

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
monitor_speed = 115200
upload_speed = 921600
lib_extra_dirs = lib
build_flags = 
    -I include
lib_deps =
    EEPROM
    Unity
monitor_filters = esp32_exception_decoder, colorize, log2file

; Common configuration for ESP32 test environments
[env:esp32_test_base]
platform = espressif32
board = esp32dev
framework = arduino
build_flags = 
    -I include
    -I src
test_framework = unity
test_build_src = yes
lib_deps =
    Unity

; Common configuration for native test environments
[env:native_test_base]
platform = native
framework = arduino
build_flags = 
    -I include
    -I src
    -I test/include
    -DUNITY_INCLUDE_CONFIG_H
    -std=c++11
test_framework = unity
test_build_src = yes
lib_extra_dirs = 
    lib
    test/include
lib_deps =
    Unity

; Individual test environments for specific components
[env:test_circular_buffer]
extends = env:native_test_base
test_filter = test_circular_buffer/*

[env:test_math_utils]
extends = env:native_test_base
test_filter = test_math_utils/*

[env:test_pid_controller]
extends = env:esp32_test_base
test_filter = test_pid_controller/*

[env:test_trajectory_planner]
extends = env:esp32_test_base
test_filter = test_trajectory_planner/*

[env:test_motor_control]
extends = env:esp32_test_base
test_filter = test_motor_control/*

[env:test_encoder]
extends = env:esp32_test_base
test_filter = test_encoder/*

[env:test_safety_monitor]
extends = env:esp32_test_base
test_filter = test_safety_monitor/*

[env:test_system_manager]
extends = env:esp32_test_base
lib_deps =
    ${env:esp32_test_base.lib_deps}
    EEPROM
test_filter = test_system_manager/*

[env:test_motor_manager]
extends = env:esp32_test_base
lib_deps =
    ${env:esp32_test_base.lib_deps}
    EEPROM
test_filter = test_motor_manager/*

[env:test_command_handling]
extends = env:esp32_test_base
test_filter = test_command_handling/*

[env:test_eeprom_manager]
extends = env:esp32_test_base
lib_deps =
    ${env:esp32_test_base.lib_deps}
    EEPROM
test_filter = test_eeprom_manager/*

[env:test_integration]
extends = env:esp32_test_base
lib_deps =
    ${env:esp32_test_base.lib_deps}
    EEPROM
test_filter = test_integration/*